<p style="text-align: center"><img src="/img/vector-tiles.jpg" class="img-responsive"></p>
<p>I have seen a lot of talk about <a href="https://github.com/google/protobuf/">protobol buffers</a> and <a href="https://www.mapbox.com/developers/vector-tiles/">vector tiles</a> recently, promising much better performance loading and rendering layers than just plain geojson. I've seen a lot of demos of the tech, but had trouble putting it all together. This is my first attempt at creating a server that will query PostGIS, serve vector tiles encoded into protobuf, and render them on a Leaflet map.</p>
<p>First, we will create a layer in Leaflet, using the excellent <a href="https://github.com/SpatialServer/Leaflet.MapboxVectorTile">Leaflet.MapboxVectorTile</a> plugin.</p>
<pre><code class="js">var vectorTileLayer = new L.TileLayer.MVTSource({
  url: '/vector-tiles/layername/{z}/{x}/{y}.pbf',
  clickableLayers: ['layername'],
  getIDForLayerFeature: function(feature) {
    return feature._id
  }
})
map.addLayer(vectorTileLayer)</code></pre>
<p>Now, we will create a route to match the above URL. Create a node server with Express, and add a route similar to a standard tile layer:</p>
<pre><code class="js">router.get('/vector-tiles/:layername/:z/:x/:y.pbf', function(req, res) {

})</code></pre>
<p>Next, get the bounding box of our data, using the <a href="https://www.npmjs.com/package/sphericalmercator">sphericalmercator</a> library</p>
<pre><code class="js">var SphericalMercator = require('sphericalmercator')
var mercator = new SphericalMercator({
  size: 256 //tile size
})
var bbox = mercator.bbox(
  +req.params.x,
  +req.params.y,
  +req.params.z,
  false,
  '4326'
)</code></pre>
<p>Use this bounding box to query PostGIS for the data we need for this tile. Convert the resulting rows into a single geojson feature collection.</p>
<pre><code class="sql">select st_asgeojson(geom) as feature from table where st_intersects(geom, bbox)
</code></pre>
<p>Now that we have the geojson for the tile, we can create a vector tile using <a href="https://www.npmjs.com/package/mapnik">node-mapnik</a></p>
<pre><code class="js">var mapnik = require('mapnik')
var vtile = new mapnik.VectorTile(+req.params.z, +req.params.x, +req.params.y)
vtile.addGeoJSON(JSON.stringify(geojson), 'layername')</code></pre>
<p>Finally, use vtile.getData() to get the protobuf-encoded buffer from the vector tile, pass it through zlib.deflate to compress, set the correct headers, and serve it.</p>
<pre><code class="js">res.setHeader('Content-Encoding', 'deflate')
res.setHeader('Content-Type', 'application/x-protobuf')
zlib.deflate(vtile.getData(), function(err, pbf) {
  res.send(pbf)
})
</code></pre>
<p>Your vectorTileLayer in Leaflet should now be working.</p>
<p>So far, this seems to load complex layers much faster than querying and returning the entire geojson for a bounding box, and has the advantage of sending actual vector data to the client, unlike a traditional tile layer.</p>
<p>Discuss with me on <a href="https://twitter.com/fsrowe">twitter</a>.</p>